generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String
  studentId    String?
  phone        String?
  role         UserRole  @default(STUDENT)
  password     String
  department   String?
  isVerified   Boolean   @default(false)
  profileImage String?
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  items                 Item[]
  claims                Claim[]
  messages              Message[]
  sentChats             Chat[]         @relation("SentChats")
  receivedChats         Chat[]         @relation("ReceivedChats")
  sentMessages          Message[]      @relation("SentMessages")
  receivedMessages      Message[]      @relation("ReceivedMessages")
  sentNotifications     Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationReceiver")

  @@map("users")
}

model Item {
  id            String     @id @default(cuid())
  title         String
  reporterEmail String?
  description   String
  type          ItemType
  status        ItemStatus @default(ACTIVE)
  location      String
  dateFound     DateTime?
  dateLost      DateTime?
  images        String[]
  tags          String[]
  contactInfo   String?
  reward        String?

  // Foreign keys
  userId String

  // Relations
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  category String?
  claims   Claim[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("items")
}

model Claim {
  id          String      @id @default(cuid())
  description String
  status      ClaimStatus @default(PENDING)
  proofImages String[]
  adminNotes  String?

  itemId     String
  claimantId String

  // Relations
  item     Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  claimant User      @relation(fields: [claimantId], references: [id], onDelete: Cascade)
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("claims")
}

model Message {
  id      String  @id @default(cuid())
  content String
  isRead  Boolean @default(false)

  // Foreign keys
  senderId   String
  claimId    String
  receiverId String

  // Relations
  sender   User  @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  claim    Claim @relation(fields: [claimId], references: [id], onDelete: Cascade)
  receiver User  @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@map("messages")
}

model Chat {
  id      String  @id @default(cuid())
  content String
  isRead  Boolean @default(false)

  // Foreign keys
  senderId   String
  receiverId String

  // Relations
  sender   User @relation("SentChats", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedChats", fields: [receiverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("chats")
}

model Notification {
  id       String  @id @default(cuid())
  title    String
  isRead   Boolean @default(false)
  metadata Json?

  // Foreign keys
  receiverId String
  senderId   String

  // Relations
  receiver User @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender   User @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("notifications")
}

enum UserRole {
  STUDENT
  FACULTY
  ADMIN
}

enum ItemStatus {
  PENDING
  ACTIVE
  RETURNED
  ARCHIVED
}

enum ItemType {
  LOST
  FOUND
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  DISPUTED
}
